"""
Django settings for bright_times project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from django.contrib import messages

import dj_database_url

if os.path.exists('env.py'):
    import env  # noqa

# Sets DEBUG to True only if the environment variable exists AND is set to True
# Default value is False
DEBUG = os.environ.get('DEBUG', False)

# Development variable is to determine whether to use dev resources or not
# Default value is False
DEVELOPMENT = os.environ.get('DEVELOPMENT', False)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# Stripe
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUB_KEY')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')

ALLOWED_HOSTS = [os.environ['ALLOWED_HOST']]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',

]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # AWS
    'storages',

    # Crispy forms
    'crispy_bootstrap4',
    'crispy_forms',

    # Allauth
    'allauth_override',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # Project apps
    'home',
    'events',
    'user_profile.apps.UserProfileConfig',  # Install user_profile app signals
    'tickets.apps.TicketsConfig',  # Install tickets app that includes stripe
    'management',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Allauth
    'allauth.account.middleware.AccountMiddleware',
]

# Media settings
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Cripsy forms settings
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# Allauth settings
SITES_ENABLED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = False
ACCOUNT_USERNAME_MIN_LENGTH = 3
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

# Alluth email

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('EMAIL_HOST_FROM_EMAIL')

ROOT_URLCONF = 'bright_times.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # `allauth` needs this from django
                'django.template.context_processors.request',

                # Context proccessor
                'utils.context_processors.user_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'bright_times.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if DEVELOPMENT:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }

# Use AWS S3 for static and media files if [use] DEVELOPMENT resource == False
# Default is False if doesn't exist
if not os.environ.get('DEVELOPMENT', False):
    AWS_STORAGE_BUCKET_NAME = 'your-bright-times'
    AWS_S3_REGION_NAME = 'eu-north-1'
    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

    STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    STATICFILES_LOCATION = 'static'
    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
    MEDIAFILES_LOCATION = 'media'

    # override static and media URLS in production
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'

    # S3 bucket caching
    AWS_S3_OBJECT_PARAMETERS = {
        'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
        'CacheControl': 'max-age=94608000'
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Static settings
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Standard toast messages
class ToastMessage:

    @staticmethod
    def form_validation_error(request):
        messages.error(request, 'Please correct the form errors.')

    @staticmethod
    def not_a_manager(request):
        messages.error(request, 'You are not a manager of this venue.')

    @staticmethod
    def login_required(request):
        messages.error(request, 'You need to login to view this page.')

    @staticmethod
    def min_max_tickets_error(request, num_of_tickets_attempted):
        if num_of_tickets_attempted < 1:
            messages.error(request, 'You must buy at least 1 ticket.')
        else:
            messages.error(
                request, 'You can only buy a maximum of 10 tickets.')

    @staticmethod
    def user_reached_max_tickets(request):
        messages.error(request, f'You have reached the maximum number of \
            tickets ({MAX_TICKETS_PER_USER}) you can buy for this event.')

    @staticmethod
    def must_be_a_venue_manager(request):
        messages.error(request, 'You must be a venue manager to view this \
            page.')

    @staticmethod
    def cannot_delete_venue_not_manager(request):
        messages.error(request, 'You are not a manager of this venue.')

    @staticmethod
    def deleted_successfully(request, name):
        messages.success(request, f'{name} deleted successfully.')

    @staticmethod
    def updated_successfully(request, name):
        messages.success(request, f'{name} updated successfully.')

    @staticmethod
    def email_verification_required(request,
                                    attempted_action="access this page"):
        """You must verify email message

        attempted_action (str): The action the user was trying to perform
        """
        messages.error(request, f'You must verify your email address to \
            {attempted_action}')

    @staticmethod
    def user_not_found(request):
        messages.error(request, 'User not found.')


# The variable is singular to aid readbility when using the methods
TOAST_MESSAGE = ToastMessage

# Tickets
MAX_TICKETS_PER_USER = 10

# Venue Managers
VENUE_MANAGER_ROLE = "OWNER", "MANAGER", "STAFF"
